`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 11.10.2022 17:21:04
// Design Name: 
// Module Name: rx_testbench
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////


module interfaz_tb(

    );
    
 
   
parameter  DATA_SIZE = 8  ; // esto es A y B de la ALU
parameter  TRAMA_SIZE = 8;  //esto es el tamaño del buff que recibo desde RX
parameter  OPCODE_SIZE = 6; //es menor a SIZE_TRAMA !!
parameter  COUNTER_LEN = 5;
parameter  TOTAL_SIZE = ( DATA_SIZE *2 + TRAMA_SIZE);//tamaño total
reg i_clock, reset,b_start;
wire i_tick,o_tx;
reg [7:0] i_buff_data;
wire [7:0] o_buff_data;  //Buffer de TRAMA recibidos
wire o_flag_rx_done,o_flag_tx_done;      //flag de recepcion terminada
localparam SIZE_TRAMA_BIT= 8 ;   //Size Data bits (TRAMA)
localparam FR_COCK_HZ=4000;
localparam BAUDRATE=100;
localparam LEN_COUNTER=4;
 
 
UART_tx #(SIZE_TRAMA_BIT)myTx (i_clock, reset,b_start,i_tick,i_buff_data,o_tx,o_flag_tx_done);
UART_rx #(SIZE_TRAMA_BIT)myRx (i_clock, reset,o_tx, i_tick,o_buff_data,o_flag_rx_done);
INTERFAZ #() my_int (i_clock, reset,o_buff_data,o_flag_rx_done);

    always #10 i_clock = ~i_clock;
    
    UART_tiks #(FR_COCK_HZ,BAUDRATE,LEN_COUNTER) tick_generator (.i_clk(i_clock),
                           .i_reset(reset),
                           .o_tick(i_tick)
                 );
    
                 
    initial
    begin
     i_clock = 0;
    reset = 1;
    b_start = 0;

    #10 
    reset = 0; 
    //DATA 
    i_buff_data = 8'b10010101;
    #1
    b_start = 1;
    #1000
     b_start = 0;
    #48000
    i_buff_data = 8'b11111111;
    #1
    b_start = 1;
    #10
    b_start = 0;
    
        end

 

endmodule
